C51 COMPILER V9.60.7.0   MAIN                                                              03/05/2023 23:08:36 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\MAIN.obj
COMPILER INVOKED BY: Z:\home\pranjal\megawin\C51\BIN\C51.exe Source\MAIN.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Source;.\So
                    -urce\Driver\Include;.\Source\Driver\Source;.\Source\Middleware\Include;.\Source\Middleware\Source) DEBUG OBJECTEXTEND PR
                    -INT(.\Listings\MAIN.lst) TABS(2) OBJECT(.\Objects\MAIN.obj)

line level    source

   1          #define _MAIN_C
   2          
   3          #include <Intrins.h>
   4          #include <Absacc.h>
   5          
   6          // #include <stdio.h>  // for printf
   7          #include <stdlib.h>
   8          #include "./REG_MG82F6D17.h"
   9          #include "./TYPEDEF.h"
  10          #include "./MG82F6D17_CONFIG.h"
  11          #include "nrf.h"
  12          
  13          #define MCU_SYSCLK 48000000
  14          #define MCU_CPUCLK (MCU_SYSCLK / 2)
  15          
  16          #define TIMER_1T_1ms_TH ((65536 - (u16)(float)(1000 * ((float)(MCU_SYSCLK) / (float)(1000000)))) / 256)
  17          #define TIMER_1T_1ms_TL ((65536 - (u16)(float)(1000 * ((float)(MCU_SYSCLK) / (float)(1000000)))) % 256)
  18          
  19          #define TIMER_12T_1ms_TH ((65536 - (u16)(float)(1000 * ((float)(MCU_SYSCLK) / (float)(12000000)))) / 256)
  20          #define TIMER_12T_1ms_TL ((65536 - (u16)(float)(1000 * ((float)(MCU_SYSCLK) / (float)(12000000)))) % 256)
  21          
  22          #define TIMER_12T_10ms_TH ((65536 - (u16)(float)(10000 * ((float)(MCU_SYSCLK) / (float)(12000000)))) / 256
             -)
  23          #define TIMER_12T_10ms_TL ((65536 - (u16)(float)(10000 * ((float)(MCU_SYSCLK) / (float)(12000000)))) % 256
             -)
  24          
  25          #define SPI_nSS P33
  26          #define SPI_CE P11
  27          
  28          char putchar(char c)
  29          {
  30   1        bit bES;
  31   1        bES = ES0;
  32   1        ES0 = 0;
  33   1        S0BUF = c;
  34   1        while (TI0 == 0)
  35   1          ;
  36   1        TI0 = 0;
  37   1        ES0 = bES;
  38   1        return 0;
  39   1      }
  40          
  41          void DelayXus(unsigned char xUs)
  42          {
  43   1        while (xUs != 0)
  44   1        {
  45   2      #if (MCU_CPUCLK >= 11059200)
  46   2          _nop_();
  47   2      #endif
  48   2      #if (MCU_CPUCLK >= 14745600)
  49   2          _nop_();
  50   2          _nop_();
  51   2          _nop_();
C51 COMPILER V9.60.7.0   MAIN                                                              03/05/2023 23:08:36 PAGE 2   

  52   2          _nop_();
  53   2      #endif
  54   2      #if (MCU_CPUCLK >= 16000000)
  55   2          _nop_();
  56   2      #endif
  57   2      
  58   2      #if (MCU_CPUCLK >= 22118400)
  59   2          _nop_();
  60   2          _nop_();
  61   2          _nop_();
  62   2          _nop_();
  63   2          _nop_();
  64   2          _nop_();
  65   2      #endif
  66   2      #if (MCU_CPUCLK >= 24000000)
  67   2          _nop_();
  68   2          _nop_();
  69   2      #endif
  70   2      #if (MCU_CPUCLK >= 29491200)
                  _nop_();
                  _nop_();
                  _nop_();
                  _nop_();
                  _nop_();
                  _nop_();
              #endif
  78   2      #if (MCU_CPUCLK >= 32000000)
                  _nop_();
                  _nop_();
              #endif
  82   2      
  83   2          xUs--;
  84   2        }
  85   1      }
  86          
  87          /*************************************************
  88           *Function:       void DelayXms(u16 xMs)
  89           *Description:    dealy,unit:ms
  90           *Input:        u16 xMs -> *1ms  (1~65535)
  91           *Output:
  92           *************************************************/
  93          void DelayXms(u16 xMs)
  94          {
  95   1        while (xMs != 0)
  96   1        {
  97   2          DelayXus(200);
  98   2          DelayXus(200);
  99   2          DelayXus(200);
 100   2          DelayXus(200);
 101   2          DelayXus(200);
 102   2          xMs--;
 103   2        }
 104   1      }
 105          
 106          #define PORT_SetP2PushPull(x) \
 107            P2M0 = P2M0 | (x);        \
 108            SFRPI = 1;                \
 109            P2M1 = P2M1 & (~(x));     \
 110            SFRPI = 0
 111          #define PORT_SetP3PushPull(x) \
 112            P3M0 = P3M0 & (~(x));     \
 113            P3M1 = P3M1 | (x)
C51 COMPILER V9.60.7.0   MAIN                                                              03/05/2023 23:08:36 PAGE 3   

 114          #define PORT_SetP1PushPull(x) \
 115            P1M0 = P1M0 | (x);        \
 116            P1M1 = P1M1 & (~(x))
 117          #define PORT_SetP1OpenDrainPu(x) \
 118            P1M0 = P1M0 | (x);           \
 119            P1M1 = P1M1 | (x)
 120          void InitPort(void)
 121          {
 122   1        PORT_SetP2PushPull(BIT2 | BIT4 | BIT6); // Set P22,P24,P26 as Push-Pull,For LED.
 123   1      
 124   1        PORT_SetP3PushPull(BIT3);            // Set P33 as Push-Pull, For nSS
 125   1        PORT_SetP1PushPull(BIT1 | BIT4 | BIT5 | BIT7); // Set P11(ce), P14(nSS),P15(MOSI),P17(SPICLK) as push-pul
             -l for output.
 126   1        PORT_SetP1OpenDrainPu(BIT6);
 127   1      }
 128          void InitClock(void)
 129          {
 130   1        CKCON0 = 0 | 0x08 | 0 | 0x40 | 0x10;
 131   1        DelayXus(100);
 132   1      
 133   1        // ISPCR = 0x80;
 134   1        // IFADRH = 0x0;
 135   1        // IFADRL = 0x40;
 136   1        // IFMT = 4;
 137   1      
 138   1        // IFD = 0x10 | 0x0C | 0x00;
 139   1        // SCMD = 0x46;
 140   1        // SCMD = 0xB9;
 141   1        //  _nop_();
 142   1        //  IFMT = 0;
 143   1        //  ISPCR = 0x0;
 144   1      }
 145          
 146          void InitSPI(void)
 147          {
 148   1        SPCON = SPCON | (0x40);
 149   1        SPCON = SPCON | (0x80 | 0x10);
 150   1        SPCON = (SPCON & 0xFC) | (1 & 0x03);
 151   1        SPSTAT = (1 >> 2);
 152   1        SPCON = SPCON & (~0x08);
 153   1        SPCON = SPCON & (~0x20);
 154   1        SPCON = SPCON & (~0x04);
 155   1        SFRPI = 1;
 156   1        AUXR4 = AUXR4 & (~0x08);
 157   1        SFRPI = 0; // IO Port: nSS/P14,MOSI/P15,MISO/P16,SPICLK/P17
 158   1      }
 159          
 160          unsigned char SPITransceiver(unsigned char SPI_DATA)
 161          {
 162   1        SPDAT = SPI_DATA;
 163   1        while ((SPSTAT & 0x80) == 0)
 164   1          ;
 165   1        SPSTAT = SPSTAT | 0x80;
 166   1        return SPDAT;
 167   1      }
 168          
 169          void SPI_Send(unsigned char *data_pack, uint16_t len)
 170          {
 171   1        int i = 0;
 172   1        SPI_nSS = 0;
 173   1        for (; i < len; i++)
 174   1        {
C51 COMPILER V9.60.7.0   MAIN                                                              03/05/2023 23:08:36 PAGE 4   

 175   2          data_pack[i] = SPITransceiver(data_pack[i]);
 176   2        }
 177   1        SPI_nSS = 1;
 178   1      }
 179          
 180          // // NRF24   **************************************************************
 181          
 182          #define radio_channel 90
 183          #define payload 32
 184          uint8_t data_buffer[33];
 185          uint8_t write_buffer[33];
 186          
 187          void nrf24_init()
 188          {
 189   1        SPI_CE = 1;
 190   1        SPI_nSS = 1;
 191   1      }
 192          
 193          void nrf24_read_register(uint8_t reg, uint8_t len)
 194          {
 195   1        int i;
 196   1        data_buffer[0] = R_REGISTER | (REGISTER_MASK & reg);
 197   1        for (i = 1; i <= len; i++)
 198   1        {
 199   2          data_buffer[i] = NOP;
 200   2        }
 201   1        SPI_Send(data_buffer, len + 1);
 202   1      }
 203          
 204          void nrf24_write_register(uint8_t reg, uint8_t len)
 205          {
 206   1        int i;
 207   1        data_buffer[0] = W_REGISTER | (REGISTER_MASK & reg);
 208   1        for (i = 1; i <= len; i++)
 209   1        {
 210   2          data_buffer[i] = write_buffer[i - 1];
 211   2        }
 212   1        SPI_Send(data_buffer, len + 1);
 213   1      }
 214          
 215          void nrf24_setPayloadSize()
 216          {
 217   1        return;
 218   1      }
 219          
 220          void nrf24_setChannel(uint8_t channel)
 221          {
 222   1        if (channel < MAX_CHANNEL)
 223   1          write_buffer[0] = channel;
 224   1        else
 225   1          write_buffer[0] = MAX_CHANNEL;
 226   1        nrf24_write_register(RF_CH, 1);
 227   1      }
 228          
 229          void nrf24_setDataRate()
 230          {
 231   1        uint8_t setup;
 232   1        nrf24_read_register(RF_SETUP, 1);
 233   1        setup = data_buffer[1];
 234   1        setup &= ~((1 << RF_DR_LOW) | (1 << RF_DR_HIGH));
 235   1        setup |= 1 << RF_DR_LOW;
 236   1        write_buffer[0] = setup;
C51 COMPILER V9.60.7.0   MAIN                                                              03/05/2023 23:08:36 PAGE 5   

 237   1        nrf24_write_register(RF_SETUP, 1);
 238   1      }
 239          // 0- low, 1- high, 2-max
 240          void nrf24_setPALevel(uint8_t level)
 241          {
 242   1        uint8_t setup;
 243   1        nrf24_read_register(RF_SETUP, 1);
 244   1        setup = data_buffer[1];
 245   1        setup &= ~((1 << RF_PWR_LOW) | (1 << RF_PWR_HIGH));
 246   1      
 247   1        if (level == 2)
 248   1          setup |= (1 << RF_PWR_LOW) | (1 << RF_PWR_HIGH);
 249   1        else if (level == 1)
 250   1          setup |= (1 << RF_PWR_HIGH);
 251   1        else
 252   1          setup |= (1 << RF_PWR_LOW);
 253   1        write_buffer[0] = setup;
 254   1        nrf24_write_register(RF_SETUP, 1);
 255   1      }
 256          
 257          // 0 - disable, 1- enable
 258          // Applies to all pipes, can be done for single pipe(ref datasheet)
 259          void nrf24_setAutoAck(uint8_t enable)
 260          {
 261   1        if (enable)
 262   1          write_buffer[0] = 0x3F;
 263   1        else
 264   1          write_buffer[0] = 0x00;
 265   1        nrf24_write_register(EN_AA, 1);
 266   1      }
 267          
 268          void nrf24_enableDynamicPayloads()
 269          {
 270   1        nrf24_read_register(FEATURE, 1);
 271   1        write_buffer[0] = data_buffer[1] | EN_DPL;
 272   1        nrf24_write_register(FEATURE, 1);
 273   1      }
 274          
 275          void nrf24_enableAckPayload()
 276          {
 277   1        nrf24_read_register(FEATURE, 1);
 278   1        write_buffer[0] = data_buffer[1] | EN_ACK_PAY | EN_DPL;
 279   1        nrf24_write_register(FEATURE, 1);
 280   1        nrf24_read_register(DYNPD, 1);
 281   1        write_buffer[0] = data_buffer[1] | DPL_P0 | DPL_P1;
 282   1      }
 283          
 284          void nrf24_openReadingPipe(uint8_t pipe, uint8_t *address)
 285          {
 286   1        write_buffer[0] = address[0];
 287   1        write_buffer[1] = address[1];
 288   1        write_buffer[2] = address[2];
 289   1        write_buffer[3] = address[3];
 290   1        write_buffer[4] = address[4];
 291   1        nrf24_write_register(RX_ADDR_P1, 5);
 292   1      
 293   1        write_buffer[0] = payload;
 294   1        nrf24_write_register(RX_PW_P1, 1);
 295   1      
 296   1        // nrf24_read_register(EN_RXADDR, 1);
 297   1        // write_buffer[0] = data_buffer[1] | ERX_P1;
 298   1        // nrf24_write_register(EN_RXADDR, 1);
C51 COMPILER V9.60.7.0   MAIN                                                              03/05/2023 23:08:36 PAGE 6   

 299   1      }
*** WARNING C280 IN LINE 284 OF Source\MAIN.c: 'pipe': unreferenced local variable
 300          
 301          void nrf24_printDetails()
 302          {
 303   1        int i;
 304   1        nrf24_read_register(RF_CH, 1);
 305   1        printf("RF_CH : %02X\r\n", data_buffer[1] & 0xFFFF);
 306   1      
 307   1        nrf24_read_register(RF_SETUP, 1);
 308   1        printf("RF_SETUP : %02X\r\n", data_buffer[1] & 0xFFFF);
 309   1      
 310   1        nrf24_read_register(STATUS, 1);
 311   1        printf("Status : %02X\r\n", data_buffer[0] & 0xFFFF);
 312   1      
 313   1        nrf24_read_register(EN_AA, 1);
 314   1        printf("EN_AA : %02X\r\n", data_buffer[1] & 0xFFFF);
 315   1      
 316   1        nrf24_read_register(DYNPD, 1);
 317   1        printf("DYNPD : %02X\r\n", data_buffer[1] & 0xFFFF);
 318   1      
 319   1        nrf24_read_register(FEATURE, 1);
 320   1        printf("FEATURE : %02X\r\n", data_buffer[1] & 0xFFFF);
 321   1      
 322   1        nrf24_read_register(RX_ADDR_P1, 5);
 323   1        printf("RX_ADDR_P1 : ");
 324   1        for (i = 0; i < 5; i++)
 325   1        {
 326   2          printf("%02X", data_buffer[i + 1] & 0xFFFF);
 327   2        }
 328   1        printf("\r\n");
 329   1      
 330   1        nrf24_read_register(TX_ADDR, 5);
 331   1        printf("TX_ADDR : ");
 332   1        for (i = 0; i < 5; i++)
 333   1        {
 334   2          printf("%02X", data_buffer[i + 1] & 0xFFFF);
 335   2        }
 336   1        printf("\r\n");
 337   1      
 338   1        nrf24_read_register(RX_PW_P1, 1);
 339   1        printf("RX_PW_P1 : %02X\r\n", data_buffer[1] & 0xFFFF);
 340   1      
 341   1        nrf24_read_register(EN_RXADDR, 1);
 342   1        printf("EN_RXADDR : %02X\r\n", data_buffer[1] & 0xFFFF);
 343   1      
 344   1        nrf24_read_register(CONFIG, 1);
 345   1        printf("CONFIG : %02X\r\n", data_buffer[1] & 0xFFFF);
 346   1      
 347   1        nrf24_read_register(RPD, 1);
 348   1        printf("RPD : %02X\r\n", data_buffer[1] & 0xFFFF);
 349   1      }
 350          
 351          void nrf24_listen()
 352          {
 353   1      }
 354          
 355          void nrf24_setup()
 356          {
 357   1        /*
 358   1        Set up nrf24 with following config
 359   1        payload - 32
C51 COMPILER V9.60.7.0   MAIN                                                              03/05/2023 23:08:36 PAGE 7   

 360   1        channel - 2
 361   1        data rate - 250kbps
 362   1        power - pa_max
 363   1        autoack - true
 364   1        dynamicpayload - true
 365   1        ackpayload - true
 366   1        */
 367   1        int i;
 368   1        uint8_t rx_addr[] = {0xE0, 0xE0, 0xF1, 0xF1, 0xE0};
 369   1        uint8_t tx_addr[] = {0xF1, 0xF1, 0xF0, 0xF0, 0xE0};
 370   1      
 371   1        // Set radio channel
 372   1        write_buffer[0] = radio_channel;
 373   1        nrf24_write_register(RF_CH, 1);
 374   1      
 375   1        // Set data rate 250KBps and output power to max
 376   1        write_buffer[0] = 36;
 377   1        nrf24_write_register(RF_SETUP, 1);
 378   1      
 379   1        // Enable auto ack on all pipes
 380   1        write_buffer[0] = 0x3f;
 381   1        nrf24_write_register(EN_AA, 1);
 382   1      
 383   1        // Enabling dynamic payloads
 384   1        write_buffer[0] = 0x3f;
 385   1        nrf24_write_register(DYNPD, 1);
 386   1      
 387   1        write_buffer[0] = 0x06;
 388   1        nrf24_write_register(FEATURE, 1);
 389   1      
 390   1        // setting tx and rx addressses
 391   1        for (i = 0; i < 5; i++)
 392   1        {
 393   2          write_buffer[i] = rx_addr[4 - i];
 394   2        }
 395   1        nrf24_write_register(RX_ADDR_P1, 5);
 396   1        for (i = 0; i < 5; i++)
 397   1        {
 398   2          write_buffer[i] = tx_addr[4 - i];
 399   2        }
 400   1        nrf24_write_register(TX_ADDR, 5);
 401   1      
 402   1        // Set rx recieve payload size
 403   1        write_buffer[0] = 32;
 404   1        nrf24_write_register(RX_PW_P1, 1);
 405   1      
 406   1        // Enable recieve pipe
 407   1        write_buffer[0] = 0x03;
 408   1        nrf24_write_register(EN_RXADDR, 1);
 409   1      
 410   1        // Enable 8 bit CRC and set to reciever, power up the controller
 411   1        write_buffer[0] = 11;
 412   1        nrf24_write_register(CONFIG, 1);
 413   1      }
 414          
 415          void nrf24_get_data()
 416          {
 417   1        int i;
 418   1        data_buffer[0] = R_RX_PAYLOAD;
 419   1        for (i = 1; i <= 33; i++)
 420   1        {
 421   2          data_buffer[i] = NOP;
C51 COMPILER V9.60.7.0   MAIN                                                              03/05/2023 23:08:36 PAGE 8   

 422   2        }
 423   1        SPI_Send(data_buffer, 33);
 424   1      
 425   1        for (i = 0; i < 33; i++)
 426   1        {
 427   2          printf("%02X ", data_buffer[i] & 0xFFFF);
 428   2        }
 429   1        printf("\r\n");
 430   1      }
 431          
 432          uint8_t nrf24_available()
 433          {
 434   1        uint8_t result = 0;
 435   1        nrf24_read_register(STATUS, 1);
 436   1        if (data_buffer[0] & (1 << 6) || (data_buffer[0] & 0x0E != 0x0E))
 437   1          result = 1;
 438   1        
 439   1        if(result)
 440   1        {
 441   2      
 442   2        }
 443   1        write_buffer[0] = (1<<6);
 444   1        nrf24_write_register(STATUS,1);
 445   1      
 446   1        nrf24_read_register(STATUS,1);
 447   1        if(data_buffer[0]&(1<<5))
 448   1        {
 449   2          write_buffer[0] = (1<<5);
 450   2          nrf24_write_register(STATUS,1); 
 451   2        }
 452   1        return result;
 453   1      }
 454          
 455          uint8_t nrf24_getDynamicPayloadSize()
 456          {
 457   1        data_buffer[0] = R_RX_PL_WID;
 458   1        data_buffer[1] = NOP;
 459   1        SPI_Send(data_buffer,2);
 460   1        return data_buffer[1];
 461   1      }
 462          
 463          void main()
 464          {
 465   1        uint8_t dat = 257, b = 1;
 466   1        int i;
 467   1        System_Init();
 468   1      
 469   1        InitPort();
 470   1        InitClock();
 471   1        InitSPI();
 472   1      
 473   1        nrf24_init();
 474   1        nrf24_setup();
 475   1      
 476   1        nrf24_printDetails();
 477   1      
 478   1        printf("nrf init\n");
 479   1      
 480   1        while (1)
 481   1        {
 482   2          SPI_CE=1;
 483   2          nrf24_printDetails();
C51 COMPILER V9.60.7.0   MAIN                                                              03/05/2023 23:08:36 PAGE 9   

 484   2          while(!nrf24_available())
 485   2          {
 486   3            DelayXms(1);
 487   3          }
 488   2      
 489   2          if(nrf24_getDynamicPayloadSize()==0)
 490   2          {
 491   3            continue;
 492   3          }
 493   2      
 494   2          nrf24_get_data();
 495   2          SPI_CE=0;
 496   2          DelayXms(1);
 497   2      
 498   2      
 499   2          // nrf24_setup();
 500   2          // nrf24_read_register(STATUS, 1);
 501   2          // if (data_buffer[0] & 0x0E != 0x0E || data_buffer[0] & (1 << 6))
 502   2          // {
 503   2          //  printf("STATUS : %02X\r\n", data_buffer[0] & 0xFFFF);
 504   2          //  while (1)
 505   2          //  {
 506   2          //    nrf24_get_data();
 507   2          //    nrf24_read_register(FIFO_STATUS, 1);
 508   2          //    printf("fifo stat %d\r\n", data_buffer[1] & 0xFFFF);
 509   2          //    if (data_buffer[1] & 1 == 0)
 510   2          //    {
 511   2          //      write_buffer[0] = (1 << 6);
 512   2          //      nrf24_write_register(STATUS, 1);
 513   2          //      continue;
 514   2          //    }
 515   2          //    nrf24_read_register(STATUS, 1);
 516   2          //    if (data_buffer[0] & (1 << 6))
 517   2          //    {
 518   2          //      continue;
 519   2          //    }
 520   2          //    break;
 521   2          //  }
 522   2          //  nrf24_printDetails();
 523   2          // }
 524   2      
 525   2          // nrf24_read_register(FIFO_STATUS, 1);
 526   2          // if (data_buffer[1] & 1 == 0)
 527   2          // {
 528   2          //  nrf24_get_data();
 529   2          // }
 530   2          // // printf("fdgh\r\n");
 531   2          // write_buffer[0] = (1 << 6);
 532   2          // nrf24_write_register(STATUS, 1);
 533   2      
 534   2          // nrf24_read_register(RPD, 1);
 535   2          // if (data_buffer[1] != 0)
 536   2          // {
 537   2          //  printf("RPD : %02X\r\n", data_buffer[1] & 0xFFFF);
 538   2          //  nrf24_printDetails();
 539   2          // }
 540   2          // DelayXms(1);
 541   2        }
 542   1      }
*** WARNING C280 IN LINE 466 OF Source\MAIN.c: 'i': unreferenced local variable


C51 COMPILER V9.60.7.0   MAIN                                                              03/05/2023 23:08:36 PAGE 10  

MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1342    ----
   CONSTANT SIZE    =    221    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     66      28
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
